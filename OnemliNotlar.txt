				--ArchitecturePatterns(Mimari Patternler)--

				Architecture Patternler, bir projenin sistematik işleyişinden (calısmasını/kurulumunu saglayan temel mekanizmasından) sorumludur...Projenin tüm calısma mantıgı ve sistemsel işleyişi ile ilgilenen bir sablondur...Bozuldukları zaman proje cöker...

				Design Patternler ise, kesinlikle projenin sistematik işleyişi ile ilgilenmez(Proje nasıl calısacak nerelere hangi assemblyler alınacak vs...) Proje icerisinden cıkardıgınız zaman proje cökmez...Ancak performansını da ciddi ölcüde kaybeder...Projenin kurulumuna bir katkısı olmaz...Sadece mimari  pattern ile uyum sagladıgı sürece ciddi ölcüde performansını arttırır...


				--Yonetilebilirlik, ekip calısması ve performans acısından bütün sorumlulukları tek tek projelere ayırdıgınız mimarilere Layered Architecture Patterns denir....Bunlardan N-Tier Architecture, Hybrid N-Tier Architecture, Onion Architecture ve Hexagonal Architecture en bilinenleridir... N-Tier Architecture Pattern bütün katmanların (projelerin) bagımsız olması prensibini uygulayarak ciddi ölcüde esneklik saglar... TEk bir projede hem veritabanı hem tasarım hem veritabanındaki tabloları temsil edecek class'ların tutulması bir hata durumunda esnekligi kısıtlayan bir yöntemdir...Ancak bütün görevler kendi sorumluluklarını uygulayan ayrı projelere verildigi zaman daha fazla esneklik kazanıp aynı zamanda hataya daha hızlı bir şekilde müdahale edebilir bir hale  geleceksinizdir...Aynı zamanda ekip üyeleri de aynı anda calısabilirler... Ve performans acısından da sistemin daha hızlı calısması saglanacaktır...

				Mimari Patternler ikiye ayrılırlar:
				Layered Architecture Patterns
				Modular Architecture Patterns(MVC,MVVM,MVM)


				Katmanlı Mimari kullanmak icin aklınızdaki projeyi görev yapacak ayrı ayrı parcalara ayırmalısınız... Projenizin bütün halini bölerek yönetmeye calıstıgınız ve her projeye kendi görevlerini yazdıgınız bir katmanlı mimari modeli uygulama işlemine gectiginizde N-Tier Mimari patterni ortaya cıkmaktadır...

				Katmanlı Mimari profesyonel bir geleneksel yapıda minimum 5 katmandan olusursa en saglıklı patterni sunar...İstendigi takdirde bagımsız olan bir katmanlı mimari (COde First veya benzeri manuel yapılarda kullanılan bir katmanlı mimari) ihtiyaca göre ek katmanları alarak kendisini genişletebilir...Lakin bu ek katmanların cok dikkatli acılması gerekir...Normalde tek bir catı altında durması gereken yapıları ayırmamalısınız...KAtmanlı mimari özgürlügünüzü kısıtlayan hazır yapılarda(ancak en son care olarak DBFirst burada kullanılır) bile 3 katmanlı kullanılmaması gerekir...3 katmanlı durumu kesinlikle tavsiye edilmez....

				3 katmanlı bir N-Tier Architecture Pattern'in katmanları(Tavsiye Edilmez):

				DAL(Data Access Layer)
				BLL(Business Logic Layer)
				UI (User Interface) /PL (Presentation Layer)

				Katmanlı terimi proje demektir...N-Tier(Cok katmanlı) demek bir Solution'da birden fazla proje demektir...


				1 => Entities
				2 => Configuration 
				3 => DAL
				4 => BLL
				5 => PL /WFA
				6 => Mobile

				1 => DAL(Data Access Layer) - Veri Eişimi Katmanı : Solution'inizin sadece veritabanı baglantısı ile ilgilenecek olan katmanıdır... DBFirst'te sadece veritabanı yansıması almayı saglarken sizi kısıtlayarak tablolarınızı temsil eden sınıflarınızı da alır (Halbuki saglıklı bir N-Tier mimarisinde bu sınıfların da ayrı bir projede (Katmanda) bulunması gerekir) Yani CodeFirst yönteminde bu katmanın sorumlulugu böyle verilmemelidir...Yaratacagınız COntext sınıfının DAL'de ayrı bir şekilde, diger sınıfların da ENTITIES katmanında ayrı bir şekilde tutulması gerekir... Context sınıfınızın icerisinde yapılan ayarlamalar DBFirst'te bu katman tarafından belirlense de ayarlama aynı katman icerisinde ayrı bir klasorde tutularak ilgili Context sınıfında kullanılması en saglıklısı olur...CodeFirst yapısı kullanıyor iseniz bu ayarlama işlemleri de COnfiguration isimli ayrı bir katmanda durur... 

				2 => BLL(Business Logic Layer) - İş Mantıgı Katmanı : Eger bir Framework'un size sundugu yapıları özelleştirmek/korumak / hakimiyetiniz altına almak isterseniz veya ek olarak kendi metotlarınızı da acmak isterseniz bu metotlar tüm her yerde kullanılabilecek metotlar olacaksa /ortak bir sınıf yaratmak isterseniz ve bunu yönetmek isterseniz bu katmanda toplarsınız...Aynı zamanda BLL katmanı N-Tier mimari paterninde tasarım patternlerinizin (design patterns) büyük bir cogunlugunun barındırılacagı yerdir...

				3 => Presentation (UI-User Interface) Layer: Sunum katmanı : Tasarım arayüzünüzdür...Kullanıcı bunu görür bunu kullanır...Burası sayesinde program calısabilir ve kullanılabilir...

				------

				Katmanlı Mimarilerde Önemli Kurallar vardır:

				1 => Bir mimaride birden fazla Presentation Layer bulunabilir (Form, Web,Mobile,API)...Ancak DAL, BLL,Conf,Entities katmanları sadece bir tane olabilirler...

				2 => Eger bir katman (proje) baska bir katmanı referans alıyorsa oraya referans veremez... Circular Dependency yaratmıs olursunuz...Ortak yapılar icin illa belirli sınıflar kullanılacak ise bir baska ara katman acılır...

				.Net Framework üzerinde yaratılan mimarilerde gecerlidir : 

				3 => Eger bir katmandan referans almıssanız, bu durum o katmanın aldıgı kendi referanslarını da alacagınız anlamına gelmez...Onları ayrı bir şekilde referans almalısınız...

				-----------------------

				Configuration => Bizim veritabanı ayarlamarını yapacagımız katmandır

				ENTITIES => Bizim veritabanımızda tablolarımızı temsil edecek class'larımızın bulundugu katmandır...

				N-Tier mimari paterninde UI asla DAL'dan referans almaz...
